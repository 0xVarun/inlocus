Location:
	cell tower
	gps - lat / long
	wifi - top 5/10 AP
	Beacon - M / m / uuid


-	Dwell time 
-	Route taken 
-	Heat maps of the area 
-	Record new visitors 
-	Identify repeat customers 
o	Frequency of visit 
o	Date & Time of visit 
-	Push information 
o	Track conversions/clicks
-   Total Number of visitors
-   Visitors today/this week
-   Repeat visitors


Timeline Chart 
	total number of visitors / repeat visitors last week
		- filter : 
				1. time
				2. way to remove all filters 
				3. date filter
				4. Hourly chart - date hours 



'use strict';
module.exports = {
  up: (queryInterface, Sequelize) => {
    return queryInterface.createTable('users', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      appId: {
        type: Sequelize.INTEGER,
        references: {
          model: 'applications', 
          key: 'id', 
        },
        onUpdate: 'CASCADE',
        onDelete: 'SET NULL',
      },
      name: {
        type: Sequelize.STRING
      },
      username: {
        unique: true,
        type: Sequelize.STRING
      },
      email: {
        unique: true,
        type: Sequelize.STRING
      },
      password: {
        type: Sequelize.STRING
      },
      active: {
        type: Sequelize.BOOLEAN
      },
      superadmin: {
        type: Sequelize.BOOLEAN
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },
  down: (queryInterface, Sequelize) => {
    return queryInterface.dropTable('users');
  }
};


'use strict';
module.exports = (sequelize, DataTypes) => {
  const user = sequelize.define('user', {
    name: DataTypes.STRING,
    username: DataTypes.STRING,
    email: DataTypes.STRING,
    password: DataTypes.STRING,
    active: DataTypes.BOOLEAN,
    superadmin: DataTypes.BOOLEAN,
    appId: {
      type: DataTypes.INTEGER,
      references: {
        model: 'application',
        key: 'id'
      }
    }
  }, {});
  user.associate = function(models) {
    // associations can be defined here
    user.hasOne(models.application, {
      foreignKey: {
        name: 'id',
        allowNull: false
      }
    })
  };
  return user;
};