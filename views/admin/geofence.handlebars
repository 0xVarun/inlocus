<style>#map{height:400px;width:100%}.pac-card{margin:10px 10px 0 0;border-radius:2px 0 0 2px;box-sizing:border-box;-moz-box-sizing:border-box;outline:0;box-shadow:0 2px 6px rgba(0,0,0,.3);background-color:#fff;font-family:Roboto}#pac-container{padding-bottom:12px;margin-right:12px}.pac-controls{display:inline-block;padding:5px 11px}.pac-controls label{font-family:Roboto;font-size:13px;font-weight:300}#pac-input{background-color:#fff;font-family:Roboto;font-size:15px;font-weight:300;margin-left:12px;padding:0 11px 0 13px;text-overflow:ellipsis;width:400px}#pac-input:focus{border-color:#4d90fe}#title{color:#fff;background-color:#4d90fe;font-size:25px;font-weight:500;padding:6px 12px}#target{width:345px}</style>
<div class="containe-fluid">
    <div class="row row-eq-height margin-top">
        <div class="col-md-4 col-xs-12 col-sm-12">
            <div class="card shadow">
                <div class="card-header"><a href="/admin/geofence"><i class="fas fa-chevron-left"></i></a> Geofence</div>
                <div class="card-body">
                    <form action="/admin/geofence/create" method="POST">
                        <div class="form-row">
                            <div class="col">
                                <div class="md-form">
                                    <input type="text" name="fence_name" id="fence_name" class="form-control" required="true">
                                    <label for="fence_name">Geofence Name <small>*</small></label>
                                </div>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="col">
                                <div class="md-form">
                                    <input type="text" name="latitude" id="latitude" class="form-control" readonly="true" placeholder="Latitude">
                                    <label for="latitude">Latitude</label>
                                </div>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="col">
                                <div class="md-form">
                                    <input type="text" name="longitude" id="longitude" class="form-control" readonly="true" placeholder="Longitude">
                                    <label for="longitude">Longitude</label>
                                </div>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="col">
                                <div class="md-form">
                                    <input type="text" name="radius" id="radius" class="form-control" readonly="true" placeholder="Radius">
                                    <label for="radius">Radius</label>
                                </div>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="col">
                                <label for="location">Location <small>*</small></label>
                                <select name="location" id="location" class="browser-default custom-select">
                                    <option selected="true" disabled="true">---Select---</option>
                                    {{#each locations}}
                                    <option value="{{id}}">{{name}}</option>
                                    {{/each}}
                                </select>
                            </div>
                        </div>
                        <button type="submit" id="submitBtn" class="btn btn-success btn-user" disabled="true">Create</button>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-8 col-xs-12 col-sm-12">
            <div class="card shadow">
                <div class="card-header">Map</div>
                <div class="card-body">
                    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
                    <div id="map"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

function initMap(){
    
    let mLocation = undefined;
    let map = undefined;
    let drawingManager = undefined;

    if(navigator.geolocation) {
        navigator.geolocation.getCurrentPosition( position => {
            mLocation = {lat: position.coords.latitude, lng: position.coords.longitude};
            map = new google.maps.Map(document.getElementById('map'), {zoom: 18, center: mLocation});
            let searchInput = document.getElementById('pac-input');
            let searchBox = new google.maps.places.SearchBox(searchInput);
            map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(searchInput);

            let all_overlays = [];
            let selectedShape;
            drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.MARKER,
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: [
                    //google.maps.drawing.OverlayType.MARKER,
                    google.maps.drawing.OverlayType.CIRCLE,
                    //google.maps.drawing.OverlayType.POLYGON,
                    //google.maps.drawing.OverlayType.RECTANGLE
                ]
            },
            circleOptions: {
                fillColor: '#4d72de',
                fillOpacity: 0.1,
                strokeWeight: 3,
                clickable: true,
                editable: true,
                zIndex: 1
            },
            rectangleOptions: {
                fillColor: '#4d72de',
                fillOpacity: 0.5,
                strokeWeight: 3,
                clickable: true,
                editable: true,
                zIndex: 1
            }
        });

        /**
         * Search Start
         */
        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
            console.log('CALLED');
        });

        var searchMarkers = [];

        searchBox.addListener('places_changed', function() {
            let searchPlaces = searchBox.getPlaces();

            if(searchPlaces.length == 0) {
                return;
            }

            searchMarkers.forEach(function(marker) {
                marker.setMap(null);
            });

            let bounds = new google.maps.LatLngBounds();

            searchPlaces.forEach(function(searchPlace) {
                if (!searchPlace.geometry) {
                  console.log("Returned searchPlace contains no geometry");
                  return;
                }

                var icon = {
                  url: searchPlace.icon,
                  size: new google.maps.Size(71, 71),
                  origin: new google.maps.Point(0, 0),
                  anchor: new google.maps.Point(17, 34),
                  scaledSize: new google.maps.Size(25, 25)
                };

                searchMarkers.push(new google.maps.Marker({
                  map: map,
                  icon: icon,
                  title: searchPlace.name,
                  position: searchPlace.geometry.location
                }));

                if (searchPlace.geometry.viewport) {
                  // Only geocodes have viewport.
                  bounds.union(searchPlace.geometry.viewport);
                } else {
                  bounds.extend(searchPlace.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });
        // Search End

        function clearFence() {
            if(selectedShape) {
                selectedShape.setEditable(false);
                selectedShape = null;
            }
        }

        function setFence(shape) {
            clearFence();
            selectedShape = shape;
            shape.setEditable(true);
        }

        function deleteSelectedFence() {
            if (selectedShape) {
                selectedShape.setMap(null);
                selectedShape = null;
            }
        }

        function deleteAllShape() {
            for (var i = 0; i < all_overlays.length; i++) {
                all_overlays[i].overlay.setMap(null);
            }
            all_overlays = [];
        }

        drawingManager.setMap(map);

        google.maps.event.addListener(drawingManager, 'overlaycomplete', function(event) {
            if(event.type == 'circle') {
                let radius = event.overlay.getRadius();
                let lat = event.overlay.center.lat();
                let lng = event.overlay.center.lng();
                $("#radius").val(radius);
                $("#latitude").val(lat);
                $("#longitude").val(lng);
                $("#submitBtn").removeAttr('disabled');
            }
        });

        });
    } else {
        mLocation = { lat: 19.1175295, lng: 72.91651519999999 };
        map = new google.maps.Map(document.getElementById('map'), {zoom: 18, center: mLocation});
        drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: google.maps.drawing.OverlayType.CIRCLE,
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: [
                    //google.maps.drawing.OverlayType.MARKER,
                    google.maps.drawing.OverlayType.CIRCLE,
                    //google.maps.drawing.OverlayType.POLYGON,
                    //google.maps.drawing.OverlayType.RECTANGLE
                ]
            },
            circleOptions: {
                fillColor: '#4d72de',
                fillOpacity: 0.5,
                strokeWeight: 3,
                clickable: true,
                editable: true,
                zIndex: 1
            },
            rectangleOptions: {
                fillColor: '#4d72de',
                fillOpacity: 0.5,
                strokeWeight: 3,
                clickable: true,
                editable: true,
                zIndex: 1
            }
        });
        drawingManager.setMap(map);
        google.maps.event.addListener(drawingManager, 'overlaycomplete', function(event) {
            if(event.type == 'circle') {
                let radius = event.overlay.getRadius();
                let lat = event.overlay.center.lat();
                let lng = event.overlay.center.lng();
                $("#radius").val(radius);
                $("#latitude").val(lat);
                $("#longitude").val(lng);
                $("#submitBtn").removeAttr('disabled');
            }
        });
    }
}
</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD0awMda5obf1OnLxaJ1gqghu2A19Fr7Bs&callback=initMap&libraries=drawing,places"></script>
{{!-- <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDgAjjr1VNy4zJCZEz-6FgIdkH3SVBS6jA&callback=initMap&libraries=drawing,places"></script> --}}
